@startuml

top to bottom direction
skinparam linetype ortho

class Artist {
  + Artist(long, String, String, Date): 
  + firstName: String
  + dateOfBirth: Date
  + lastName: String
  + id: long
  + getFieldContents(): String[]
  + setId(long): void
  + toString(): String
  + getDateOfBirth(): Date
  + getFirstName(): String
  + getCSVHeader(): String[]
  + hashCode(): int
  + equals(Object): boolean
  + getId(): long
  + getLastName(): String
}
class BarType {
  + BarType(long, int, int): 
  + beatValue: int
  + id: long
  + beatCount: int
  + getId(): long
  + setId(long): void
  + hashCode(): int
  + getBeatCount(): int
  + equals(Object): boolean
  + getBeatValue(): int
  + getFieldContents(): String[]
  + getCSVHeader(): String[]
  + toString(): String
}
class Genre {
  + Genre(long, String): 
  + id: long
  + name: String
  + toString(): String
  + getName(): String
  + getFieldContents(): String[]
  + setId(long): void
  + hashCode(): int
  + equals(Object): boolean
  + getCSVHeader(): String[]
  + getId(): long
}
class Song {
  + Song(long, long, String, List<Artist>, Genre, float, BarType): 
  + title: String
  + artists: List<Artist>
  + bpm: float
  + userId: long
  + id: long
  + genre: Genre
  + barType: BarType
  + getBarType(): BarType
  + getId(): long
  + getTitle(): String
  + getUserId(): long
  + getArtists(): List<Artist>
  + getFieldContents(): String[]
  + getCSVHeader(): String[]
  + hashCode(): int
  + getGenre(): Genre
  + toString(): String
  + setId(long): void
  + getBpm(): float
  + equals(Object): boolean
}
interface SongRepository << interface >> {
  + findAllSongs(): List<Song>
  + save(Song): void
  + findAllSongsByUserId(long): List<Song>
  + update(Song): void
  + findSongById(long): Optional<Song>
  + delete(long): void
}

Song           "1" *-[#595959,plain]-> "artists\n*" Artist         
Song           "1" *-[#595959,plain]-> "barType\n1" BarType        
Song           "1" *-[#595959,plain]-> "genre\n1" Genre          
@enduml
