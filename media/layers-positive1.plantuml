@startuml

top to bottom direction
skinparam linetype ortho

package Domain <<Rectangle>> {

    class Song {
      + Song(long, long, String, List<Artist>, Genre, float, BarType):
      + id: long
      + artists: List<Artist>
      + userId: long
      + barType: BarType
      + bpm: float
      + genre: Genre
      + title: String
      + getFieldContents(): String[]
      + equals(Object): boolean
      + getArtists(): List<Artist>
      + getCSVHeader(): String[]
      + toString(): String
      + getTitle(): String
      + hashCode(): int
      + getBpm(): float
      + getGenre(): Genre
      + getId(): long
      + setId(long): void
      + getBarType(): BarType
      + getUserId(): long
    }

    interface SongRepository << interface >> {
      + findSongById(long): Optional<Song>
      + findAllSongs(): List<Song>
      + delete(long): void
      + findAllSongsByUserId(long): List<Song>
      + update(Song): void
      + save(Song): void
    }

}

package Application <<Rectangle>> {

    class SongBuilder {
      + SongBuilder(long, User, String, List<Artist>):
      + artists: List<Artist>
      + bpm: float
      + genre: Genre
      + title: String
      + id: long
      + barType: BarType
      + user: User
      + withBpm(float): SongBuilder
      + withBarType(BarType): SongBuilder
      + withGenre(Genre): SongBuilder
      + build(): Song
    }

    interface SongService << interface >> {
      + getAllSongsForUser(): List<Song>
      + searchSongsByTitle(String): List<Song>
      + delete(Song): void
      + create(Song): void
      + update(Song): void
    }

    class SongServiceImpl {
      + SongServiceImpl(User, SongRepository, SongListObserver):
      + user: User
      + songListObserver: SongListObserver
      + songRepository: SongRepository
      + searchSongsByTitle(String): List<Song>
      + getAllSongsForUser(): List<Song>
      + update(Song): void
      + delete(Song): void
      + create(Song): void
    }

}

package Plugin <<Rectangle>> {

    class SongRepositoryImpl {
      + SongRepositoryImpl():
      + SongRepositoryImpl(CSVHelper, GenreRepository, BarTypeRepository, RelSongArtistRepository):
      + songs: List<Song>
      + csvHelper: CSVHelper
      + FILE_PATH: String
      + genreRepository: GenreRepository
      + barTypeRepository: BarTypeRepository
      + relSongArtistRepository: RelSongArtistRepository
      + findAllSongsByUserId(long): List<Song>
      + findAllSongs(): List<Song>
      + reload(): void
      + delete(long): void
      + findSongById(long): Optional<Song>
      + save(Song): void
      + update(Song): void
      + writeOut(): void
    }

}


SongBuilder         -[#595959,dashed]->  Song               : "«create»"
SongRepositoryImpl "1" *-[#595959,plain]-> "songs\n*" Song               
SongRepositoryImpl  -[#595959,dashed]->  Song               : "«create»"
SongRepositoryImpl  -[#008200,dashed]-^  SongRepository     
SongServiceImpl    "1" *-[#595959,plain]-> "songRepository\n1" SongRepository     
SongServiceImpl     -[#008200,dashed]-^  SongService        
@enduml
